---
const { image, alt, href, title, technologies, animation } = Astro.props;
import Technologies from "./Technologies.astro";
---

<a
  href={href}
  class={`min-h-44 max-h-52 flex flex-col justify-center rounded-2xl border px-4 gap-2 bg-slate-800 text-white max-w-[450px] py-3  reveal ${animation}`}
  target="_blank"
>
  <div class="flex">
    <div class="w-1/3 flex justify-center items-center">
      <h2 class="px-1 text-xs min-[400px]:text-base lg:text-lg">{title}</h2>
    </div>
    <div class="w-2/3 flex items-center justify-end">
      <svg
        data-testid="geist-icon"
        height="16"
        stroke-linejoin="round"
        viewBox="0 0 16 16"
        width="16"
        style="color: currentcolor;"
        ><path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M9.53033 2.21968L9 1.68935L7.93934 2.75001L8.46967 3.28034L12.4393 7.25001H1.75H1V8.75001H1.75H12.4393L8.46967 12.7197L7.93934 13.25L9 14.3107L9.53033 13.7803L14.6036 8.70711C14.9941 8.31659 14.9941 7.68342 14.6036 7.2929L9.53033 2.21968Z"
          fill="currentColor"></path></svg>
    </div>
  </div>
  <div class="flex max-h-36">
    <div class="h-full w-1/3 flex flex-col justify-center items-center">
      <div class="h-full">
        <img
          src={`/images/${image}`}
          alt={alt}
          class="overflow-hidden h-auto w-full max-h-36 "
        />
      </div>
    </div>
    <div class="h-full w-2/3 flex flex-col">
      <div class="mt-auto ps-3 flex flex-wrap gap-3">
        {technologies && <Technologies technologies={technologies} />}
      </div>
    </div>
  </div>
</a>

<style>
.reveal {
  position: relative;
  transform: translateX(-100%);
  opacity: 0;
  transition: 1s all ease;
}

.reveal.active {
  transform: translateX(0);
  opacity: 1;
}

@keyframes leftToRight {
  0% {
    transform: translateX(-100%);
    opacity: 0;
  }
  100% {
    transform: translateX(0);
    opacity: 1;
  }
}

@keyframes rightToLeft {
  0% {
    transform: translateX(100%);
    opacity: 0;
  }
  100% {
    transform: translateX(0);
    opacity: 1;
  }
}

@keyframes hoverEffect {
  0% {
    transform: translateX(0);
  }
  100% {
    transform: translateX(0) scale(1.05);
  }
}

.left-to-right {
  animation: leftToRight 1s forwards;
  transition: transform 1s ease-in-out;
}

.right-to-left {
  animation: rightToLeft 1s forwards;
  transition: transform 1s ease-in-out;
}

.left-to-right:hover,
.right-to-left:hover {
  transform: translateX(0) scale(1.01) !important;
}
</style>


<script>
  function reveal() {
  var reveals = document.querySelectorAll(".reveal");

  for (var i = 0; i < reveals.length; i++) {
    var windowHeight = window.innerHeight;
    var elementTop = reveals[i].getBoundingClientRect().top;
    var elementVisible = 10;

    if (elementTop < windowHeight - elementVisible) {
      reveals[i].classList.remove('left-to-right', 'right-to-left');
      reveals[i].classList.add("active");
      reveals[i].classList.add(i % 2 === 0 ? 'left-to-right' : 'right-to-left');
    } else {
      reveals[i].classList.remove("active");
      reveals[i].classList.remove('left-to-right', 'right-to-left');
    }
  }
}

window.addEventListener("scroll", reveal);

</script>